name: Test
on: [push,pull_request]

jobs:
  collect-packages:
    runs-on: ubuntu-20.04

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Setup Cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.npm-cache.outputs.dir }}
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Install Root Dependencies
        run: npm ci
      - name: "Find Dockerfiles"
        id: "packages"
        run: |
          SOLUTIONS=$(npx lerna list --json)
          echo "::set-output name=packages::${SOLUTIONS}"
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
  test_suite:
    runs-on: ${{ matrix.os }}
    name: Test - ${{ matrix.os }} - Node ${{ matrix.node }} - Package ${{ matrix.package.name }}
    timeout-minutes: 30
    needs: ["collect-packages"]
    strategy:
      matrix:
        package: ${{ fromJson(needs.collect-packages.outputs.packages) }}
        node: [10, 14]
        os: [ubuntu-latest] #, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 200
      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Setup Cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.npm-cache.outputs.dir }}
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Install Deps
        run: |
          npm ci
          npx lerna bootstrap --ci
      - name: Run Build
        run: npx lerna run build --include-dependencies --scope=${{ matrix.package.name }}
      - name: Run Test
        run: npx lerna run test --scope=${{ matrix.package.name }}
      - name: Upload coverage to Codecov Monorepo
        uses: donmahallem/codecov-monorepo@release
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Run Lint
        run: npx lerna run lint --scope=${{ matrix.package.name }}
      - name: Run Docs
        run: npx lerna run docs --scope=${{ matrix.package.name }}
  finish:
    needs: test_suite
    name: Finish Test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      run: echo "finish"
